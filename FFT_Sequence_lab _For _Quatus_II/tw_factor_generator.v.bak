module tw_factor_generator #(parameter word_length_tw = 8, STAGGER = 20) (
        input                       clk,
        input                       en_rd, 
        input  [10:              0] rd_ptr_angle,
        input                       en_modify_tw, 

        output [word_length_tw-1:0] cos_data,
        output [word_length_tw-1:0] sin_data
);

generate
    
    if (word_length_tw == 14 && STAGGER == 5) begin

        M_TWIDLE_0_05_v #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_0_05_v(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 14 && STAGGER == 10) begin

        M_TWIDLE_0_10_v #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_0_10_v(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 14 && STAGGER == 15) begin

        M_TWIDLE_0_15_v #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_0_15_v(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 14  && STAGGER == 20) begin

        M_TWIDLE_14_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_14_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 14  && STAGGER == 25) begin

        M_TWIDLE_0_25_v #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_0_25_v(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    end 
    else if (word_length_tw == 6) begin

        M_TWIDLE_6_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_6_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );

    end
    else if (word_length_tw == 7) begin

        M_TWIDLE_7_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_7_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 8) begin

        M_TWIDLE_8_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_8_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 9) begin

        M_TWIDLE_9_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_9_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 10) begin

        M_TWIDLE_10_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_10_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 11) begin

        M_TWIDLE_11_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_11_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 12) begin

        M_TWIDLE_12_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_12_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 14) begin

        M_TWIDLE_14_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_14_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
    else if (word_length_tw == 16) begin

        M_TWIDLE_16_bit #( .SIZE(10),.word_length_tw(word_length_tw))
        M_TWIDLE_16_bit(
        .clk(clk),
        .en_rd(en_rd), 
        .rd_ptr_angle(rd_ptr_angle),
        .en_modf(en_modify_tw), 

        .cos_data(cos_data),
        .sin_data(sin_data)
    );
    
    end
endgenerate

endmodule