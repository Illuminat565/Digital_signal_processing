module  MEM_DATA2 #(parameter N=29, DEPTH = 16, SIZE = 4)(
    input clk,rst_n,
    
    input load_data,
    input        [SIZE:0]invert_adr,
    input signed [N-1:0] x_real_i1,
    input signed [N-1:0] y_real_i1,
    input en_wr,
    input signed [N-1:0] x_real_i2,
    input signed [N-1:0] y_real_i2,

    input [SIZE:0] index_wr2,
    input [SIZE:0] index_rd,
    input          en_rd,
    
    output  signed [N-1:0]  x_real_o1,
    output  signed [N-1:0]  y_real_o1,
    output  signed [N-1:0]  x_real_o2,
    output  signed [N-1:0]  y_real_o2,

    output reg  signed [N-1:0]  x_real_o,
    output reg  signed [N-1:0]  y_real_o,
    
    output      flag_start_FFT,
    output reg  en_o,
    output      done_o
    
 );

    wire  signed [N-1:0]  x_real_i = (load_data)? x_real_i1  : x_real_i2;
    wire  signed [N-1:0]  y_real_i = (load_data)? y_real_i1  : y_real_i2;
    wire         [SIZE:0]   index_wr = (load_data)? invert_adr : index_wr2;

    reg signed [N-1:0]   mem_real_data  [DEPTH-1:0];
    reg signed [N-1:0]   mem_imag_data  [DEPTH-1:0];
    
    reg [1:0] rd_ptr;
    reg [SIZE:0] count;

    assign flag_start_FFT = (count==DEPTH);
     
    assign x_real_o1  =  (rd_ptr==1)?   x_real_o:x_real_o1;
    assign y_real_o1  =  (rd_ptr==1)?   y_real_o:y_real_o1;
    assign x_real_o2  =  (rd_ptr==2)?   x_real_o:x_real_o2;
    assign y_real_o2  =  (rd_ptr==2)?   y_real_o:y_real_o2;
    assign done_o     =  (rd_ptr==2)?    1:0;

    //------------------------handle MEM----------------------------
        always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            en_o      <= 0;
            rd_ptr    <= 0;
            count     <= 0;
        end else begin
             if (en_wr || load_data) begin
                mem_real_data[index_wr] <= x_real_i;
                mem_imag_data[index_wr] <= y_real_i;      
                count                   <= count + 1'b1;
             end else if (en_rd) begin
                x_real_o <= mem_real_data[index_rd];
                y_real_o <= mem_imag_data[index_rd];
                rd_ptr   <= rd_ptr+1'd1;
                en_o     <= 1'b1;  
                count    <= 0;
             end else begin
                rd_ptr  <= 0;
                en_o    <= 0;
                count   <= 0;
             end
        end
    end

endmodule