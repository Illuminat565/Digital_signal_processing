module  CONTROL1 #(parameter bit_width=29, N = 16, SIZE = 4)(
    input                              clk,rst_n,

    input                              start_stage,

    output reg                         en_rd,
    output reg       [SIZE-1:0]          rd_ptr,
    output reg       [1  :0]           rd_ptr_angle, 

    output reg                         en_wr,
    output reg       [SIZE-1       :0]   wr_ptr1,
    output reg       [SIZE-1       :0]   wr_ptr2,

    output                             start_next_stage,
    output reg                         done_o 
 );
    reg  [SIZE-1:0] i;
    reg           en_back_mem;
    reg  [1 :0]   k;
    reg  [SIZE-1:0] b;

 //-------------------------------------------------------------------------------
    assign start_next_stage  =  (rd_ptr == N/2+2); 
 //----------------------------------------------------------------------
    reg [6:0] cur_state;
    reg [6:0] next_state;
    reg [1:0] state;
    reg       delay;
    
 //--------------------------------------------------------------
    localparam 
         IDLE         = 7'b000_0001,
         READ         = 7'b000_0010,
         READ1        = 7'b000_0100,
         DONE_stage1  = 7'b100_0000;
    localparam
         ACTIVE       = 2'b01,
         WAIT         = 2'b10;

//---------------------------------------------------------------------
 // 1st always blocks, sequentail state transition
     always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cur_state <= IDLE;
        end else begin
            cur_state <= next_state;
        end
     end
    

 // 2st always block, combination condition judgement
    always @(*) begin
        case (cur_state)
				IDLE:       if (start_stage)            next_state = READ;
                            else                        next_state = IDLE;
                READ:       next_state = READ1;

                READ1:      if (rd_ptr == N-1)          next_state = DONE_stage1;
                            else                        next_state = READ;     
                DONE_stage1:                            next_state = IDLE; 
				
            default:                                    next_state = IDLE;
        endcase
    end

    // 3st always block, the sequential FSM output
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            reset_task;
        end else begin
            case (next_state)
                IDLE:
                    idle_task;
				READ:
                    read_task;
                READ1:
                    read_task1;
                DONE_stage1:
                    done_task;
                default:
                    idle_task;
            endcase
        end
    end
//---------------reset_task-----------------------------------------
task reset_task;
                    begin
                        i                        <= 0;   
                        en_rd                    <= 0; 
                        en_back_mem              <= 0;
                        rd_ptr                   <= 0;
                        delay                    <= 0;   
                        done_o                   <= 0;   
                        k                        <= 0;        
                    end
endtask
//-------------------------idle task-------------------------------

task idle_task;
                     begin
                        i                    <= 0;    
                        en_rd                <= 0 ; 
                        rd_ptr               <= 0;
                        en_back_mem          <= 0;
                        done_o               <= 0; 
                        k                    <= 0;
                      end
endtask

//-------------------------handle read point for the first input------------
task read_task;
                    begin
                        rd_ptr           <=    i;
                        en_rd            <=    1'b1;  
                        wr_ptr2          <=    rd_ptr;
      
                    end 
endtask
//-------------------------handle read point for the second input-----------
task read_task1;
                   begin            

                        rd_ptr           <=    rd_ptr +  N/2;
                        i                <=    i      +  1'b1;   
                        en_rd            <=    1'b1;
                        en_back_mem      <=    1'b1; 
                        k                <=    k+1;
                    end
endtask

//-------------------------done task-------------------------------

task done_task;
                   begin
                        en_rd                   <= 0; 
                        rd_ptr                  <= 0;  
                        done_o                  <= 1;
                    end
endtask



//------------------------handle to write to next RAM----------------------------
                    always @(posedge clk or negedge rst_n) begin
                    if (!rst_n) begin
                        en_wr     <= 1'b0;      
                        wr_ptr1   <= 0;
                        wr_ptr2   <= 0;
                        b         <= 0;
                        state     <= ACTIVE;
                    end else begin
                        case (state)
                            ACTIVE: begin    
                                if ((en_back_mem )) begin
                                    rd_ptr_angle <= b;
                                    en_wr        <= 1'b1;   
                                    wr_ptr1      <= b;
                                    wr_ptr2      <= b + N/2;
                                    b            <= b + 1'b1;
                                    state        <= WAIT;
                                end else begin 
                                    en_wr        <= 1'b0;
                                    b            <= 0;
                                end
                            end
                            WAIT:  begin 
                                   state        <= ACTIVE;
                                   en_wr        <= 1'b0;  
                            end
                            default: state     <= ACTIVE;
                        endcase     


                            
                            end 

                    end

endmodule 
