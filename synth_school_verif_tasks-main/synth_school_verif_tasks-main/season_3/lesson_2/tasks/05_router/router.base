module router (
    input  logic             clk,
    input  logic             aresetn,
    input  logic  [3:0][1:0] sel,
    input  logic       [3:0] in,
    output logic       [3:0] out
);

    logic [3:0] out_w;

    always_ff @( posedge clk or negedge aresetn ) begin
        if(!aresetn) begin
            out <= '0;
        end
        else begin
            out <= out_w;
        end
    end

    `define ROUTE(NUM) \
        assign out_w[NUM] = sel[0] == 3'd``NUM ? in[0] :      \
                            sel[1] == 3'd``NUM ? in[1] :      \
                            sel[2] == 3'd``NUM ? in[2] :      \
                            sel[3] == 3'd``NUM ? in[3] : 'b0;

    // Golden реализация
    // `ROUTE(0)
    // `ROUTE(1)
    // `ROUTE(2)
    // `ROUTE(3)
    
    // Багованная реализация
    // 0 - поломана очередность
    assign out_w[0] = sel[0] == 3'd0 ? in[3] :
                      sel[1] == 3'd0 ? in[2] :
                      sel[2] == 3'd0 ? in[1] :
                      sel[3] == 3'd0 ? in[0] : 'b0;
    // 1 - все хорошо
    `ROUTE(1)
    // 2 - поломано дефолтное значение
    assign out_w[2] = sel[0] == 3'd2 ? in[0] :
                      sel[1] == 3'd2 ? in[1] :
                      sel[2] == 3'd2 ? in[2] :
                      sel[3] == 3'd2 ? in[3] : 'b1;
    // 3 - везде роутится 3 значение
    assign out_w[3] = sel[0] == 3'd2 ? in[3] :
                      sel[1] == 3'd2 ? in[3] :
                      sel[2] == 3'd2 ? in[3] :
                      sel[3] == 3'd2 ? in[3] : 'b0;

endmodule